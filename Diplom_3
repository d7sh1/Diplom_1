import json
import psycopg2
import re

DB_CONFIG = {
    "host": "localhost",
    "database": "university",
    "user": "postgres",
    "password": "qwerty"
}

INPUT_FILE = "input.json"
OUTPUT_FILE = "output.json"

def is_valid_name(name):
    return bool(re.match(r"^[a-z][a-z0-9_]*$", name))

def get_db_schema(cursor):
    cursor.execute("""
        SELECT 
            table_name, 
            column_name, 
            data_type
        FROM information_schema.columns
        WHERE table_schema = 'public';
    """)
    return cursor.fetchall()

def get_constraints(cursor):
    cursor.execute("""
        SELECT 
            tc.table_name,
            kcu.column_name,
            tc.constraint_type
        FROM 
            information_schema.table_constraints AS tc 
            JOIN information_schema.key_column_usage AS kcu
              ON tc.constraint_name = kcu.constraint_name
        WHERE tc.table_schema = 'public';
    """)
    return cursor.fetchall()

def get_row_counts(cursor, table_names):
    counts = {}
    for table in table_names:
        try:
            cursor.execute(f'SELECT COUNT(*) FROM "{table}";')
            counts[table] = cursor.fetchone()[0]
        except Exception as e:
            counts[table] = f"Ошибка доступа к таблице: {str(e)}"
    return counts

def check_database_rules(input_json):
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()

    db_schema = get_db_schema(cursor)
    constraints = get_constraints(cursor)
    row_counts = get_row_counts(cursor, [t['name'] for t in input_json['tables']])

    schema_map = {(row[0], row[1]): row[2] for row in db_schema}
    constraint_map = {(row[0], row[1]): row[2] for row in constraints}

    for table in input_json['tables']:
        tname = table['name']
        table['errors'] = []

        if not is_valid_name(tname):
            table['errors'].append(f"Неверное имя таблицы '{tname}'")

        table['row_count'] = row_counts.get(tname, "Неизвестно")

        for column in table.get('columns', []):
            cname = column['name']
            column['errors'] = []

            if not is_valid_name(cname):
                column['errors'].append(f"Неверное имя столбца '{cname}'")

            if (tname, cname) not in schema_map:
                column['errors'].append("Столбец не найден в БД")
            else:
                actual_type = schema_map[(tname, cname)]
                expected_type = column.get('type')
                if expected_type and actual_type != expected_type:
                    column['errors'].append(f"Тип не совпадает: в БД '{actual_type}', ожидался '{expected_type}'")
                column['actual_type'] = actual_type

            actual_constraint = constraint_map.get((tname, cname))
            expected_constraint = column.get('constraint')
            if expected_constraint and actual_constraint != expected_constraint:
                column['errors'].append(f"Ограничение не совпадает: в БД '{actual_constraint}', ожидалось '{expected_constraint}'")
            column['actual_constraint'] = actual_constraint

    cursor.close()
    conn.close()

    return input_json

# Загрузка из файла и запись результата
if __name__ == "__main__":
    with open(INPUT_FILE, "r", encoding="utf-8") as infile:
        input_data = json.load(infile)

    result = check_database_rules(input_data)

    with open(OUTPUT_FILE, "w", encoding="utf-8") as outfile:
        json.dump(result, outfile, indent=2, ensure_ascii=False)

    print(f"Результаты проверки сохранены в файл: {OUTPUT_FILE}")
